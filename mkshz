#!/bin/bash
# mkshz - create a shell script with an embedded tgz archive
# Author: joknarf
#
[ ! "$2" ] && cat - <<'EOF' >&2 && exit 1
usage: mkshz <file.shz> <dir> [<command> [--pre-extract <command>] <tar options>]

Creates a shell script <file.shz> with embedded tgz archive created from <dir> content.
o The script will extract the archive to the current directory on execution.
o A <command> in <dir> can be specified to run after extraction with arguments passed to <file.shz>.
o A pre-extract <command> in <dir> can be specified to be extracted and run before the whole archive is extracted.

Example usage:
$ mkshz install.shz app/ bin/config.sh --pre-extract bin/pre-stop.bash --exclude=.git --exclude=*.o

Notes:
o The <command> arguments are relative to <dir>.
o The script generated will be created with a shebang line for bash.
o The script generated will extract the archive to the current directory.
o The pre-extract <command> will be extracted and executed before extracting whole archive
o The pre-extract command does not receive any arguments.
o If the pre-extract <command> exit code is not zero, the script will abort whole extraction.
EOF

shz="$1"
dir="${2%/}"
cmd="${3#./}"
shift 3
[ "$1" = "--pre-extract" ] && pre="${2#./}" && shift 2 || pre=""

[ ! -d "$dir" ] && echo "Error: Directory $dir does not exist" >&2 && exit 1
[ "$cmd" ] && cmd="$dir/$cmd" && [ ! -x "$cmd" ] && echo "Error: Command '$cmd' not found or not executable" >&2 && exit 1
[ "$pre" ] && pre="$dir/$pre" && [ ! -x "$pre" ] && echo "Error: Pre-extract commmand '$pre' not found or not executable" >&2 && exit 1

(
  cat - <<EOF
#!/bin/bash
# Script created with mkshz
# This script extracts embedded tgz archive 
# extract archive directory: '${dir}'
# command executed after extraction: '${cmd:-none}'
# pre-extract command: '${pre:-none}'
# to extract the archive without command execution, use:
#  ./${shz##*/} x-shz
# shz_verbose=1 env variable can be set to enable tar output
#
dir="$dir"
pre="$pre"
cmd="$cmd"
shz="\${0##*/}"
[ "\$1" = "x-shz" ] && cmd="" pre=""
EOF
cat - <<'EOF'
extract() {
    [ "$shz_verbose" ] && v=v || v=""
    sed '1,/^__tgz__/d' "$0"| tar xz${v}f - "$@" >&2 || exit 1
}
EOF
# bas64 encode pre-extract script
[ "$pre" ] &&  cat - <<'EOF'
# Pre-extract script:
[ "$pre" ] && {
  echo "$shz: Extracting/Executing pre-extract script ($pre)" >&2
  extract "$pre"
  "$pre" || { echo "$shz: Error: Failed to execute pre-extract script ($pre)" >&2; exit 1; }
}
EOF

  cat - <<'EOF'
echo "$shz: Extracting archive directory '$dir' in '$PWD'" >&2
extract
[ "$cmd" ] || exit 0
echo "$shz: Executing command: $cmd $*" >&2
[ -x "$cmd" ] && exec "$cmd" "$@"
echo "$shz: Error: Command $cmd not found or not executable." >&2
exit 1
__tgz__ ====== binary data starts here ==========================================
EOF
tar cvzf - "$@" "$dir" 
) >"$shz" || { echo "Error: Failed to create $shz" >&2; exit 1; }
chmod +x "$shz"
printf '\n%s\n' "$shz created with embedded tgz archive from '$dir'"
exit 0
